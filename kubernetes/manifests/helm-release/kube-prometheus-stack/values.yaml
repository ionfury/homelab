# https://github.com/prometheus-community/helm-charts/blob/main/charts/kube-prometheus-stack/values.yaml
crds:
  enabled: false
cleanPrometheusOperatorObjectNames: true
defaultRules:
  create: true
  disabled:
    KubeClientCertificateExpiration: true

alertmanager:
  enabled: true
  ingress:
    enabled: true
    ingressClassName: internal
    hosts: ["alertmanager.${internal_domain}"]
    pathType: Prefix
  alertmanagerSpec:
    replicas: 1
    alertmanagerConfiguration:
      name: kube-prometheus-stack-alertmanager
      global:
        resolveTimeout: 5m
    externalUrl: https://alertmanager.${external_domain}
    storage:
      volumeClaimTemplate:
        spec:
          storageClassName: fast
          resources:
            requests:
              storage: 1Gi
kubeApiServer:
  serviceMonitor:
    selector:
      k8s-app: kube-apiserver
kubeScheduler:
  service:
    selector:
      k8s-app: kube-scheduler
kubeControllerManager: &kubeControllerManager
  service:
    selector:
      k8s-app: kube-controller-manager
kubeEtcd:
  <<: *kubeControllerManager # etcd runs on control plane nodes
kubeProxy:
  enabled: false
prometheus:
  ingress:
    enabled: true
    ingressClassName: internal
    hosts: ["prometheus.${internal_domain}"]
    pathType: Prefix
  prometheusSpec:
    externalLabels:
      prometheus_source: ${cluster_name}
    podMonitorSelectorNilUsesHelmValues: false
    probeSelectorNilUsesHelmValues: false
    ruleSelectorNilUsesHelmValues: false
    scrapeConfigSelectorNilUsesHelmValues: false
    serviceMonitorSelectorNilUsesHelmValues: false
    enableAdminAPI: true
    walCompression: true
    enableFeatures:
      - memory-snapshot-on-shutdown
    retention: 14d
    retentionSize: 50GB
    resources:
      requests:
        cpu: 100m
      limits:
        memory: 2000Mi
    storageSpec:
      volumeClaimTemplate:
        spec:
          storageClassName: fast
          resources:
            requests:
              storage: 50Gi
prometheus-node-exporter:
  fullnameOverride: node-exporter
  prometheus:
    monitor:
      enabled: true
      relabelings:
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels: ["__meta_kubernetes_pod_node_name"]
          targetLabel: kubernetes_node
kube-state-metrics:
  fullnameOverride: kube-state-metrics
  metricLabelsAllowlist:
    - pods=[*]
    - deployments=[*]
    - persistentvolumeclaims=[*]
  prometheus:
    monitor:
      enabled: true
      relabelings:
        - action: replace
          regex: (.*)
          replacement: $1
          sourceLabels: ["__meta_kubernetes_pod_node_name"]
          targetLabel: kubernetes_node
grafana:
  enabled: false
  forceDeployDashboards: true
additionalPrometheusRulesMap:
  oom-rules:
    groups:
      - name: oom
        rules:
          - alert: OomKilled
            annotations:
              summary: Container {{ $labels.container }} in pod {{ $labels.namespace }}/{{ $labels.pod }} has been OOMKilled {{ $value }} times in the last 10 minutes.
            expr: (kube_pod_container_status_restarts_total - kube_pod_container_status_restarts_total offset 10m >= 1) and ignoring (reason) min_over_time(kube_pod_container_status_last_terminated_reason{reason="OOMKilled"}[10m]) == 1
            labels:
              severity: critical
