controllers:
  main:
    annotations:
      reloader.stakater.com/auto: "true"
    pod:
      securityContext:
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
    initContainers:
      01-init-db:
        image:
          repository: ghcr.io/onedr0p/postgres-init
          tag: "15"
        imagePullPolicy: IfNotPresent
        env:
          INIT_POSTGRES_DBNAME: "radarr_uhd_main radarr_uhd_log"
          INIT_POSTGRES_HOST: ${CLUSTER_POSTGRES_HOST}
          INIT_POSTGRES_USER:
            valueFrom:
              secretKeyRef:
                name: radarr-uhd-secret
                key: username
          INIT_POSTGRES_PASS:
            valueFrom:
              secretKeyRef:
                name: radarr-uhd-secret
                key: password
          INIT_POSTGRES_SUPER_USER:
            valueFrom:
              secretKeyRef:
                name: radarr-uhd-postgres-superuser
                key: username
          INIT_POSTGRES_SUPER_PASS:
            valueFrom:
              secretKeyRef:
                name: radarr-uhd-postgres-superuser
                key: password
    containers:
      main:
        resources:
          requests:
            cpu: 39m
            memory: 381Mi
        env:
          TZ: ${TZ}
          RADARR__INSTANCE_NAME: Radarr-uhd
          RADARR__PORT: 7878
          RADARR__LOG_LEVEL: info
          RADARR__POSTGRES_HOST: ${CLUSTER_POSTGRES_HOST}
          RADARR__POSTGRES_PORT: 5432
          RADARR__POSTGRES_MAIN_DB: radarr_uhd_main
          RADARR__POSTGRES_LOG_DB: radarr_uhd_log
          RADARR__POSTGRES_USER:
            valueFrom:
              secretKeyRef:
                name: radarr-uhd-secret
                key: username
          RADARR__POSTGRES_PASSWORD:
            valueFrom:
              secretKeyRef:
                name: radarr-uhd-secret
                key: password
          RADARR__API_KEY:
            valueFrom:
              secretKeyRef:
                name: radarr-uhd-secret
                key: key
defaultPodOptions:
  affinity:
    podAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: required-volume
                operator: In
                values:
                  - media
          topologyKey: kubernetes.io/hostname
service:
  main:
    ports:
      http:
        port: 7878
ingress:
  main:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: "cloudflare"
      gethomepage.dev/enabled: "true"
      gethomepage.dev/description: Radarr is a movie collection manager for Usenet and BitTorrent users.
      gethomepage.dev/group: Media
      gethomepage.dev/icon: radarr.png
      gethomepage.dev/name: Radarr-uhd
    className: internal
    hosts:
      - host: radarr-uhd.${INTERNAL_DOMAIN}
        paths:
          - path: /
            pathType: Prefix
            service:
              name: main
              port: http
      - host: movies-uhd.${INTERNAL_DOMAIN}
        paths:
          - path: /
            pathType: Prefix
            service:
              name: main
              port: http
    tls:
      - hosts:
          - radarr-uhd.${INTERNAL_DOMAIN}
          - movies-uhd.${INTERNAL_DOMAIN}
        secretName: radarr-uhd-tls
persistence:
  media-uhd:
    enabled: true
    existingClaim: jellyfin-app-media-uhd
    mountPath: /media
    advancedMounts:
      main:
        main:
          - path: /media
  config:
    enabled: true
    retain: true
    storageClass: ${STORAGE_CLASS_FAST_BACKUP}
    size: 10Gi
    accessMode: ReadWriteOnce
    advancedMounts:
      main:
        main:
          - path: /config
