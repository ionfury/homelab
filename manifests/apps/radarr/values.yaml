---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-3.0.1/charts/other/app-template/values.schema.json

defaultPodOptions:
  labels:
    networking/allow-egress-to-internet-except-private: "true"
    networking/allow-egress-to-postgres: "true"
    networking/allow-egress-to-kubedns: "true"
    networking/allow-ingress-to-internal-nginx: "true"
    networking/allow-ingress-to-prometheus: "true"
    networking/allow-ingress-to-gatus: "true"
  affinity:
    podAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: required-volume
                operator: In
                values:
                  - media
          topologyKey: kubernetes.io/hostname
service:
  main:
    controller: main
    ports:
      http:
        port: &port 7878
controllers:
  main:
    annotations:
      reloader.stakater.com/auto: "true"
    pod:
      securityContext:
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
    initContainers:
      01-init-db:
        image:
          repository: ghcr.io/onedr0p/postgres-init
          tag: "14.8"
        env:
          INIT_POSTGRES_DBNAME: "radarr_main radarr_log"
          INIT_POSTGRES_HOST: ${CLUSTER_POSTGRES_HOST}
          INIT_POSTGRES_USER: &pguser
            valueFrom:
              secretKeyRef:
                name: radarr-secret
                key: username
          INIT_POSTGRES_PASS: &pgpass
            valueFrom:
              secretKeyRef:
                name: radarr-secret
                key: password
          INIT_POSTGRES_SUPER_USER:
            valueFrom:
              secretKeyRef:
                name: radarr-postgres-superuser
                key: username
          INIT_POSTGRES_SUPER_PASS:
            valueFrom:
              secretKeyRef:
                name: radarr-postgres-superuser
                key: password
    containers:
      main:
        resources:
          requests:
            cpu: 39m
            memory: 381Mi
        env:
          TZ: ${TZ}
          RADARR__INSTANCE_NAME: Radarr
          RADARR__PORT: *port
          RADARR__LOG_LEVEL: info
          RADARR__POSTGRES_HOST: ${CLUSTER_POSTGRES_HOST}
          RADARR__POSTGRES_PORT: 5432
          RADARR__POSTGRES_MAIN_DB: radarr_main
          RADARR__POSTGRES_LOG_DB: radarr_log
          RADARR__POSTGRES_USER: *pguser
          RADARR__POSTGRES_PASSWORD: *pgpass
          RADARR__API_KEY:
            valueFrom:
              secretKeyRef:
                name: radarr-secret
                key: key
ingress:
  main:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: "cloudflare"
      gethomepage.dev/enabled: "true"
      gethomepage.dev/description: Radarr is a movie collection manager for Usenet and BitTorrent users.
      gethomepage.dev/group: Media
      gethomepage.dev/icon: radarr.png
      gethomepage.dev/name: ${HOSTNAME:=radarr}
    className: internal
    hosts:
      - host: &host ${HOSTNAME:=radarr}.${INTERNAL_DOMAIN}
        paths:
          - path: /
            pathType: Prefix
            service:
              identifier: main
              port: http
    tls:
      - hosts: [*host]
        secretName: radarr-tls
persistence:
  media:
    enabled: true
    existingClaim: jellyfin-app-media
    advancedMounts:
      main:
        main:
          - path: /media
  config:
    enabled: true
    retain: true
    storageClass: ${STORAGE_CLASS_SLOW_BACKUP}
    size: 10Gi
    accessMode: ReadWriteOnce
    advancedMounts:
      main:
        main:
          - path: /config
