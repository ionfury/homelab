---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-3.0.1/charts/other/app-template/values.schema.json

defaultPodOptions:
  labels:
    networking/allow-egress-to-internet-except-private: "true"
    networking/allow-egress-to-postgres: "true"
    networking/allow-egress-to-kubedns: "true"
    networking/allow-ingress-to-internal-nginx: "true"
    networking/allow-ingress-to-prometheus: "true"
    networking/allow-ingress-to-uptime-kuma: "true"
  affinity:
    podAffinity:
      requiredDuringSchedulingIgnoredDuringExecution:
        - labelSelector:
            matchExpressions:
              - key: required-volume
                operator: In
                values:
                  - media
          topologyKey: kubernetes.io/hostname
service:
  main:
    controller: main
    ports:
      http:
        port: &port 8787
controllers:
  main:
    annotations:
      reloader.stakater.com/auto: "true"
    pod:
      securityContext:
        runAsUser: 568
        runAsGroup: 568
        fsGroup: 568
        fsGroupChangePolicy: OnRootMismatch
    initContainers:
      01-init-db:
        image:
          repository: ghcr.io/onedr0p/postgres-init
          tag: "14.8"
        env:
          INIT_POSTGRES_DBNAME: "readarr_main readarr_log readarr_cache"
          INIT_POSTGRES_HOST: ${CLUSTER_POSTGRES_HOST}
          INIT_POSTGRES_USER: &pguser
            valueFrom:
              secretKeyRef:
                name: readarr-secret
                key: username
          INIT_POSTGRES_PASS: &pgpass
            valueFrom:
              secretKeyRef:
                name: readarr-secret
                key: password
          INIT_POSTGRES_SUPER_USER:
            valueFrom:
              secretKeyRef:
                name: readarr-postgres-superuser
                key: username
          INIT_POSTGRES_SUPER_PASS:
            valueFrom:
              secretKeyRef:
                name: readarr-postgres-superuser
                key: password
    containers:
      main:
        resources:
          requests:
            cpu: 22m
            memory: 149Mi
        env:
          TZ: ${TZ}
          READARR__INSTANCE_NAME: Readarr
          READARR__PORT: *port
          READARR__LOG_LEVEL: info
          READARR__POSTGRES_HOST: ${CLUSTER_POSTGRES_HOST}
          READARR__POSTGRES_PORT: 5432
          READARR__POSTGRES_MAIN_DB: readarr_main
          READARR__POSTGRES_LOG_DB: readarr_log
          READARR__POSTGRES_CACHE_DB: readarr_cache
          READARR__POSTGRES_USER: *pguser
          READARR__POSTGRES_PASSWORD: *pgpass
          READARR__API_KEY:
            valueFrom:
              secretKeyRef:
                name: readarr-secret
                key: key
ingress:
  main:
    enabled: true
    annotations:
      cert-manager.io/cluster-issuer: "cloudflare"
      gethomepage.dev/enabled: "true"
      gethomepage.dev/description: Readarr is a ebook collection manager for Usenet and BitTorrent users. It can monitor multiple RSS feeds for new books from your favorite authors and will interface with clients and indexers to grab, sort, and rename them.
      gethomepage.dev/group: Media
      gethomepage.dev/icon: readarr.png
      gethomepage.dev/name: readarr
    className: internal
    hosts:
      - host: &host ${HOSTNAME:=readarr}.${INTERNAL_DOMAIN}
        paths:
          - path: /
            pathType: Prefix
            service:
              identifier: main
              port: http
    tls:
      - hosts: [*host]
        secretName: readarr-tls
persistence:
  media:
    enabled: true
    existingClaim: jellyfin-app-media
    advancedMounts:
      main:
        main:
          - path: /media
  config:
    enabled: true
    retain: true
    storageClass: ${STORAGE_CLASS_SLOW_BACKUP}
    size: 10Gi
    accessMode: ReadWriteOnce
    advancedMounts:
      main:
        main:
          - path: /config
