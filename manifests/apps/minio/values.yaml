---
# yaml-language-server: $schema=https://raw.githubusercontent.com/bjw-s/helm-charts/app-template-3.0.1/charts/other/app-template/values.schema.json

controllers:
  main:
    annotations:
      reloader.stakater.com/auto: "true"
    containers:
      main:
        env:
          MINIO_API_CORS_ALLOW_ORIGIN: https://minio.${INTERNAL_DOMAIN},https://s3.${INTERNAL_DOMAIN}
          MINIO_BROWSER_REDIRECT_URL: https://minio.${INTERNAL_DOMAIN}
          MINIO_PROMETHEUS_JOB_ID: minio
          MINIO_PROMETHEUS_URL: http://kube-prometheus-stack-app-prometheus.monitoring.svc.cluster.local:9090
          MINIO_PROMETHEUS_AUTH_TYPE: public
          MINIO_SERVER_URL: https://s3.${INTERNAL_DOMAIN}
          MINIO_UPDATE: "off"
        #envFrom:
        #  - secretRef:
        #      name: minio-secret
        args: ["server", "/data", "--console-address", ":9001"]
        probes:
          liveness: &probes
            enabled: true
            custom: true
            spec:
              httpGet:
                path: /minio/health/live
                port: 9000
              initialDelaySeconds: 30
              periodSeconds: 30
              timeoutSeconds: 10
              failureThreshold: 6
          readiness: *probes
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          capabilities: { drop: ["ALL"] }
        resources:
          requests:
            cpu: 100m
          limits:
            memory: 2Gi
defaultPodOptions:
  securityContext:
    runAsNonRoot: true
    runAsUser: 568
    runAsGroup: 568
    fsGroup: 568
    fsGroupChangePolicy: OnRootMismatch
    supplementalGroups: [10000]
    seccompProfile: { type: RuntimeDefault }
service:
  main:
    controller: main
    ports:
      http:
        port: 9001
      s3:
        port: 9000
serviceMonitor:
  main:
    serviceName: main
    endpoints:
      - port: s3
        scheme: http
        path: /minio/v2/metrics/cluster
        interval: 1m
        scrapeTimeout: 10s
ingress:
  main:
    annotations:
      cert-manager.io/cluster-issuer: cloudflare
      gethomepage.dev/enabled: "true"
      gethomepage.dev/name: "Minio"
      gethomepage.dev/description: "Minio Console"
      gethomepage.dev/group: "Share"
      gethomepage.dev/icon: "minio.png"
      nginx.ingress.kubernetes.io/configuration-snippet: |
        more_set_headers "Access-Control-Allow-Origin: $http_origin";
      nginx.ingress.kubernetes.io/cors-allow-credentials: "true"
      nginx.ingress.kubernetes.io/cors-allow-methods: PUT, GET, POST, OPTIONS, DELETE, PATCH
      nginx.ingress.kubernetes.io/enable-cors: "true"
    className: internal
    hosts:
      - host: &host1 minio.${INTERNAL_DOMAIN}
        paths:
          - path: /
            service:
              identifier: main
              port: http
    tls:
      - secretName: minio-tls
        hosts:
          - *host1
  storage:
    annotations:
      cert-manager.io/cluster-issuer: cloudflare
      nginx.ingress.kubernetes.io/proxy-connect-timeout: "300"
      nginx.ingress.kubernetes.io/proxy-body-size: 5000m
      nginx.ingress.kubernetes.io/proxy-request-buffering: "off"
      nginx.ingress.kubernetes.io/configuration-snippet: |
        chunked_transfer_encoding off;
    className: internal
    hosts:
      - host: &host2 s3.${INTERNAL_DOMAIN}
        paths:
          - path: /
            service:
              identifier: main
              port: s3
    tls:
      - secretName: s3-tls
        hosts:
          - *host2
persistence:
  data:
    enabled: true
    retain: true
    storageClass: ${STORAGE_CLASS_FAST_BACKUP}
    size: 150Gi
    accessMode: ReadWriteOnce
    globalMounts:
      - path: /data
