image:
  repository: ghcr.io/onedr0p/lidarr-nightly # {"$imagepolicy": "media:lidarr-automation:name"}
  tag: 1.2.0.3115 # {"$imagepolicy": "media:lidarr-automation:tag"}
#envFrom:
#  - secretRef:
#      name: *app
service:
  main:
    ports:
      http:
        port: 8686
ingress:
  main:
    enabled: true
    annotations:
      kubernetes.io/ingress.class: "nginx"
      cert-manager.io/cluster-issuer: "cloudflare"
      gethomepage.dev/enabled: "true"
      gethomepage.dev/description: Lidarr is a music collection manager for Usenet and BitTorrent users.
      gethomepage.dev/group: Media
      gethomepage.dev/icon: lidarr.png
      gethomepage.dev/name: Lidarr
      gethomepage.dev/widget.type: lidarr
      gethomepage.dev/widget.url: http://lidarr.media.svc.cluster.local:8686
    hosts:
      - host: lidarr.tomnowak.work
        paths:
          - path: /
            pathType: Prefix
    tls:
      - hosts:
          - lidarr.tomnowak.work
        secretName: lidarr-tls
  api:
    enabled: true
    nameSuffix: api
    annotations:
      kubernetes.io/ingress.class: "nginx"
      cert-manager.io/cluster-issuer: "cloudflare"
    hosts:
      - host: lidarr.tomnowak.work
        paths:
          - path: /api
            pathType: Prefix
    tls:
      - hosts:
          - lidarr.tomnowak.work
        secretName: lidarr-tls
podSecurityContext:
  runAsUser: 568
  runAsGroup: 568
  fsGroup: 568
  fsGroupChangePolicy: OnRootMismatch
persistence:
  config:
    enabled: true
    retain: true
    storageClass: harvester-hdd-weekly
    size: 1Gi
  media:
    enabled: true
    existingClaim: media
    mountPath: /media
podLabels:
  required-volume: media
affinity:
  podAffinity:
    requiredDuringSchedulingIgnoredDuringExecution:
      - labelSelector:
          matchExpressions:
            - key: required-volume
              operator: In
              values:
                - media
        topologyKey: kubernetes.io/hostname
resources:
  requests:
    cpu: 200m
    memory: 500Mi
