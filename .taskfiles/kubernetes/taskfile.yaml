---
# yaml-language-server: $schema=https://taskfile.dev/schema.json
version: "3"

vars:
  CLUSTER_DIR: '{{.ROOT_DIR}}/kubernetes/clusters'
  MANIFESTS_DIR: '{{.ROOT_DIR}}/kubernetes/manifests'
  KUBERNETES_RESOURCES_DIR: '{{.ROOT_DIR}}/.taskfiles/kubernetes/resources'

tasks:
  render:
    desc: Renders all manifests.
    silent: true
    cmds:
      - task: render-clusters
      - task: render-helm-releases
      - echo "✅ All manifests rendered."

  render-clusters:
    desc: Renders all clusters.
    silent: true
    vars:
      CLUSTERS:
        sh: "ls -1 {{.CLUSTER_DIR}}"
    cmds:
      - for: { var: CLUSTERS }
        task: render-cluster-{{.ITEM}}
      - echo "✅ Clusters rendered."

  render-cluster-*:
    desc: Renders the cluster.
    label: render-cluster-{{.CLUSTER}}
    silent: true
    vars:
      CLUSTER: "{{ index .MATCH 0 }}"
    cmds:
      - task: kustomize-render
        vars:
          KUSTOMIZATION: "{{.CLUSTER_DIR}}/{{.CLUSTER}}"
    preconditions:
      - which kustomize
      - test -d "{{.CLUSTER_DIR}}/{{.CLUSTER}}"
      - test -f "{{.CLUSTER_DIR}}/{{.CLUSTER}}/kustomization.yaml"

  render-helm-releases:
    desc: Renders all Helm releases.
    silent: true
    vars:
      HELM_RELEASES:
        sh: "ls -1 {{.MANIFESTS_DIR}}/helm-release"
    cmds:
      - for: { var: HELM_RELEASES }
        task: render-helm-release-{{.ITEM}}
      - echo "✅ Helm releases rendered."
      - for: { var: HELM_RELEASES }
        task: kustomize-render
        vars:
          KUSTOMIZATION: "{{.MANIFESTS_DIR}}/helm-release/{{.ITEM}}"
      - echo "✅ Helm releases kustomize rendered."

  render-helm-release-*:
    desc: Renders the Helm release.
    #internal: true
    silent: true
    label: render-helm-release-{{.RELEASE}}
    vars:
      RELEASE: "{{ index .MATCH 0 }}"
      RELEASE_DIR: '{{.MANIFESTS_DIR}}/helm-release/{{.RELEASE}}'
      RELATIVE_RELEASE_DIR: kubernetes/manifests/helm-release/{{.RELEASE}}
      VALUES_FILE: '{{.RELEASE_DIR}}/values.yaml'
      CLUSTER_CONTEXT: '{{.CLUSTER_CONTEXT| default "live"}}'
      CLUSTER_DIR: '{{.CLUSTER_DIR}}/{{.CLUSTER_CONTEXT}}'
      OUTPUT_DIR: '{{.RELEASE_DIR}}/.rendered'
      ERRORS: '{{.OUTPUT_DIR}}/helm_errors.log'
    dotenv: [ '{{.CLUSTER_DIR}}/{{.CLUSTER_CONTEXT}}/cluster-vars.env' ]
    env:
      HELM_CHART_VERSION:
        sh: 'cat $(grep -rl "path: {{.RELATIVE_RELEASE_DIR}}" "{{.CLUSTER_DIR}}" | grep -v "kustomize.yaml") | yq "select(.metadata.name == \"{{.RELEASE}}\") | .spec.postBuild.substitute.HELM_CHART_VERSION"'
    cmds:
      - defer: '[ ! -s {{.ERRORS}} ] && echo "✅ {{.RELEASE_DIR}} >> {{.OUTPUT_DIR}}" || echo "❌ {{.RELEASE_DIR}} >> {{.ERRORS}}"'
      - defer: sed -i '' '/Pulled:/d;/Digest:/d' "{{.ERRORS}}"
      - cmd: rm -rf "{{.OUTPUT_DIR}}/{{.RELEASE}}"
        ignore_error: true
      - cmd: '{{.KUBERNETES_RESOURCES_DIR}}/template-helm-release.sh "{{.RELEASE_DIR}}" "{{.VALUES_FILE}}" "{{.OUTPUT_DIR}}" 2> "{{.ERRORS}}"'
    preconditions:
      - which kustomize
      - which helm
      - which flux
      - which yq
      - test -d "{{.MANIFESTS_DIR}}/helm-release/{{.RELEASE}}"
      - test -f "{{.MANIFESTS_DIR}}/helm-release/{{.RELEASE}}/kustomization.yaml"
      - test -d "{{.CLUSTER_DIR}}"
      - test -f "{{.CLUSTER_DIR}}/cluster-vars.env"
      - test -f "{{.VALUES_FILE}}"
      - mkdir -p {{.OUTPUT_DIR}}
      - touch {{.ERRORS}}
    sources:
      - "{{.RELEASE_DIR}}/**/*.yaml"
      - "{{.MANIFESTS_DIR}}/common/resources/helm-release/**/*.yaml"
    generates:
      - "{{.OUTPUT_DIR}}/**/*.yaml"
      - "{{.ERRORS}}"

  kustomize-render:
    desc: Validates the kustomization.
    internal: true
    silent: true
    label: kustomize-render-{{.KUSTOMIZATION}}
    requires:
      vars: [KUSTOMIZATION]
    vars:
      OUTPUT_DIR: '{{.KUSTOMIZATION}}/.rendered'
      RENDERED: '{{.OUTPUT_DIR}}/kustomize.yaml'
      ERRORS: '{{.OUTPUT_DIR}}/kustomize_errors.log'
    cmds:
      - defer: '[ ! -s {{.ERRORS}} ] && echo "✅ {{.KUSTOMIZATION}} >> {{.RENDERED}}" || echo "❌ {{.KUSTOMIZATION}} >> {{.ERRORS}}"'
      - cmd: rm "{{.RENDERED}}" "{{.ERRORS}}"
        ignore_error: true
      - cmd: kustomize build "{{.KUSTOMIZATION}}" > "{{.RENDERED}}" 2> "{{.ERRORS}}"
      - cmd: kubectl apply --dry-run=client -f "{{.RENDERED}}" > /dev/null 2>> "{{.ERRORS}}"
    preconditions:
      - which kustomize
      - test -d {{.KUSTOMIZATION}}
      - mkdir -p {{.OUTPUT_DIR}}
      - touch {{.ERRORS}}
      - touch {{.RENDERED}}
    sources:
      - "{{.KUSTOMIZATION}}/**/*.yaml"
      - "{{.MANIFESTS_DIR}}/**/*.yaml"
    generates:
      - '{{.RENDERED}}'
      - '{{.ERRORS}}'

